{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "import numpy as np\n",
    "\n",
    "#Simulates a simple play in series.\n",
    "def simPlayInSeries(teamAwins,teamBwins,teamAwinPct):\n",
    "    random.seed(a=None, version=2)\n",
    "    teamAseriesWin = 0\n",
    "    while (teamAwins < 3) and (teamBwins < 3):\n",
    "        a = random.random()\n",
    "        if (a < teamAwinPct):\n",
    "            teamAwins += 1\n",
    "        else:\n",
    "            teamBwins += 1\n",
    "    if (teamAwins == 3):\n",
    "        return True\n",
    "    return False\n",
    "\n",
    "# Returns array representing team numbers in new seeding order.\n",
    "# Inputs are the 6 win probabilities (for the higher seeded team).\n",
    "def simRoundRobin(m1v2,m1v3,m1v4,m2v3,m2v4,m3v4):\n",
    "    wins = [0.3,0.2,0.1,0]\n",
    "    # Game 1\n",
    "    if (random.random() < m1v2): wins[0] +=1\n",
    "    else: wins[1] += 1\n",
    "    # Game 2\n",
    "    if (random.random() < m1v3): wins[0] +=1\n",
    "    else: wins[2] += 1\n",
    "    # Game 3\n",
    "    if (random.random() < m1v4): wins[0] +=1\n",
    "    else: wins[3] += 1\n",
    "    # Game 4\n",
    "    if (random.random() < m2v3): wins[1] +=1\n",
    "    else: wins[2] += 1\n",
    "    # Game 5\n",
    "    if (random.random() < m2v4): wins[1] +=1\n",
    "    else: wins[3] += 1\n",
    "    # Game 6\n",
    "    if (random.random() < m3v4): wins[2] +=1\n",
    "    else: wins[3] += 1\n",
    "    ranking = sorted(range(len(wins)), key=lambda k: -wins[k])\n",
    "    for i in range(4): ranking[i]\n",
    "    #print(wins,ranking)\n",
    "    return ranking\n",
    "\n",
    "# Rows are teams. Row 1 = team 1.\n",
    "# Columns are final placements. Column 1 = top seed.\n",
    "# Inputs defined the same was as above.\n",
    "def simManyRoundRobin(m1v2,m1v3,m1v4,m2v3,m2v4,m3v4,n):\n",
    "    seedingResults = np.zeros((4,4))\n",
    "    for i in range(n):\n",
    "        results = simRoundRobin(m1v2,m1v3,m1v4,m2v3,m2v4,m3v4)\n",
    "        for j in range(4):\n",
    "            seedingResults[results[j],j] += (1/n)\n",
    "    return(seedingResults)\n",
    "\n",
    "# Each input except n is a vector, containing [higher seed wins, lower seed wins, higher seed win prob.]\n",
    "# n is, as usual, the number of simulations.\n",
    "def simAllPlayIns(s5v12,s6v11,s7v10,s8v9,n):\n",
    "    playInResults = np.zeros((8,4))\n",
    "    for i in range(n):\n",
    "        winners = [0,0,0,0]\n",
    "        # 5 v 12\n",
    "        t5win = simPlayInSeries(s5v12[0],s5v12[1],s5v12[2])\n",
    "        if t5win: winners[0] = 5\n",
    "        else: winners[0] = 12\n",
    "        # 6 v 11\n",
    "        t6win = simPlayInSeries(s6v11[0],s6v11[1],s6v11[2])\n",
    "        if t6win: winners[1] = 6\n",
    "        else: winners[1] = 11\n",
    "        # 7 v 10\n",
    "        t7win = simPlayInSeries(s7v10[0],s7v10[1],s7v10[2])\n",
    "        if t7win: winners[2] = 7\n",
    "        else: winners[2] = 10\n",
    "        # 8 v 9\n",
    "        t8win = simPlayInSeries(s8v9[0],s8v9[1],s8v9[2])\n",
    "        if t8win: winners[3] = 8\n",
    "        else: winners[3] = 9\n",
    "        winners.sort()\n",
    "        for j in range(4):\n",
    "            playInResults[winners[j]-5,j] += (1/n)\n",
    "    return playInResults\n",
    "\n",
    "# columns represent RR teams, left being original #1 seed.\n",
    "# rows represent PI teams, first row being original #5 seed.\n",
    "def compileResults(RRResults,PIResults):\n",
    "    finalMM = np.zeros((8,4))\n",
    "    preDot = np.flip(PIResults, axis=1)\n",
    "    for i in range(4):\n",
    "        for j in range(8):\n",
    "            matchupChance = np.dot(RRResults[i,:],preDot[j,:])\n",
    "            finalMM[j,i] = matchupChance\n",
    "    return finalMM\n",
    "\n",
    "# Sim the whole thing.\n",
    "def simPreliminaryRound(s5v12,s6v11,s7v10,s8v9,m1v2,m1v3,m1v4,m2v3,m2v4,m3v4,n):\n",
    "    playInRes = simAllPlayIns(s5v12,s6v11,s7v10,s8v9,n)\n",
    "    roundRobinRes = simManyRoundRobin(m1v2,m1v3,m1v4,m2v3,m2v4,m3v4,n)\n",
    "    final = compileResults(roundRobinRes,playInRes)\n",
    "    #print(final)\n",
    "    return final\n",
    "\n",
    "# Read results in more understandable form.\n",
    "def readResults(M):\n",
    "    print(\"Opponent| Seed 1 , Seed 2 , Seed 3 , Seed 4\")\n",
    "    for i in range(8):\n",
    "        print(\"Seed\",i+5,\":\",round(M[i,0],4),\",\",round(M[i,1],4),\",\",round(M[i,2],4),\",\",round(M[i,3],4))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Opponent| Seed 1 , Seed 2 , Seed 3 , Seed 4\n",
      "Seed 5 : 0.064 , 0.1167 , 0.2092 , 0.3161\n",
      "Seed 6 : 0.1157 , 0.1369 , 0.1649 , 0.1502\n",
      "Seed 7 : 0.1032 , 0.1327 , 0.1382 , 0.1252\n",
      "Seed 8 : 0.1689 , 0.178 , 0.1618 , 0.1416\n",
      "Seed 9 : 0.0894 , 0.0955 , 0.0874 , 0.0774\n",
      "Seed 10 : 0.1556 , 0.1405 , 0.1107 , 0.0938\n",
      "Seed 11 : 0.1663 , 0.1199 , 0.0812 , 0.065\n",
      "Seed 12 : 0.137 , 0.0798 , 0.0465 , 0.0307\n"
     ]
    }
   ],
   "source": [
    "# EAST\n",
    "\n",
    "# All odds for play in series are posted by Westgate Superboook, but feel free to modify them!\n",
    "\n",
    "# Run the code above.\n",
    "# The four inputs below represent series. s5v12, for example, is the series between the 5 and 12 seed. \n",
    "# Format: [games already won by higher seed, games won by lower seed, higher seed win probability]\n",
    "s5v12 = [0,0,.615] \n",
    "s6v11 = [0,0,.535]\n",
    "s7v10 = [0,0,.5]\n",
    "s8v9 = [0,0,.582]\n",
    "# The six inputs below represent single games in the round robin tournament.\n",
    "# m1v3, for example, is the match between the 1 and 3 seed.\n",
    "# The value is the win probability of the higher seed. Use a 1 or 0 if the game is already done.\n",
    "m1v2 = .55\n",
    "m1v3 = .55\n",
    "m1v4 = .55\n",
    "m2v3 = .55\n",
    "m2v4 = .55\n",
    "m3v4 = .50\n",
    "# n is the number of simulations. Higher n are more accurate but take longer to compute.\n",
    "n = 10000\n",
    "\n",
    "# The line below reads the program's output.\n",
    "# The intersection of a row and column is the chance the two teams meet in round 1.\n",
    "readResults(simPreliminaryRound(s5v12,s6v11,s7v10,s8v9,m1v2,m1v3,m1v4,m2v3,m2v4,m3v4,n))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Opponent|Seed 1,Seed 2,Seed 3,Seed 4\n",
      "Seed 5 : 0.065 0.0942 0.1803 0.2979\n",
      "Seed 6 : 0.1319 0.1473 0.1932 0.1929\n",
      "Seed 7 : 0.1282 0.1597 0.171 0.1512\n",
      "Seed 8 : 0.1408 0.1445 0.1272 0.107\n",
      "Seed 9 : 0.131 0.1343 0.1177 0.0976\n",
      "Seed 10 : 0.12 0.1132 0.0874 0.0693\n",
      "Seed 11 : 0.1197 0.0988 0.0658 0.0503\n",
      "Seed 12 : 0.1634 0.108 0.0573 0.0339\n"
     ]
    }
   ],
   "source": [
    "# WEST\n",
    "\n",
    "# Run the code above.\n",
    "# The four inputs below represent series. s5v12, for example, is the series between the 5 and 12 seed. \n",
    "# Format: [games already won by higher seed, games won by lower seed, higher seed win probability]\n",
    "s5v12 = [0,0,.574] \n",
    "s6v11 = [0,0,.59]\n",
    "s7v10 = [0,0,.559]\n",
    "s8v9 = [0,0,.512]\n",
    "# The six inputs below represent single games in the round robin tournament.\n",
    "# m1v3, for example, is the match between the 1 and 3 seed.\n",
    "# The value is the win probability of the higher seed. Use a 1 or 0 if the game is already done.\n",
    "m1v2 = .50\n",
    "m1v3 = .55\n",
    "m1v4 = .55\n",
    "m2v3 = .55\n",
    "m2v4 = .55\n",
    "m3v4 = .53\n",
    "# n is the number of simulations. Higher n are more accurate but take longer to compute.\n",
    "n = 10000\n",
    "\n",
    "# The line below reads the program's output.\n",
    "# The intersection of a row and column is the chance the two teams meet in round 1.\n",
    "readResults(simPreliminaryRound(s5v12,s6v11,s7v10,s8v9,m1v2,m1v3,m1v4,m2v3,m2v4,m3v4,n))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
